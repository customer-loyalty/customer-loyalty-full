name: Main Loyalty workflow

on:
  workflow_dispatch

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MODE: 'production'
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      MODE: 'production'
      DB_ENGINE: django.db.backends.postgresql
      DATABASE_URL: >
        postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}
        @185.41.161.178:5432/${{ secrets.DB_NAME }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - uses: actions/checkout@v3
      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          cd backend/
          pip install -r requirements.txt

#      - name: Test with flake8
#        run: |
#          python -m flake8

      - name: Apply Django Migrations for tests
        run: |
          cd backend/
          python manage.py makemigrations
          python manage.py migrate

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
#    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: actions/checkout@v3
      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote

      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/loyalty-backend:latest

      - name: Push frontend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/loyalty-frontend:latest

  build_nginx_and_push_to_docker_hub:
    name: Push nginx Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: carlodipalma/loyalty-nginx:latest

  deploy:
    name: Deploy on a production server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub

    steps:
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: 185.41.161.178
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker compose -f docker-compose.yml pull
            sudo docker compose -f docker-compose.yml down
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/loyalty-backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/loyalty-frontend:latest
            rm .env
            touch .env
            echo "DB_TYPE=postgres" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "DB_HOST=185.41.161.178" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "SECRET_KEY='${{ secrets.SECRET_KEY }}'" >> .env
            echo "DEBUG=${{ secrets.DEBUG }}" >> .env
            echo "MODE=${{ secrets.MODE }}" >> .env
            sudo docker compose -f docker-compose.yml up -d --build
            sudo docker compose -f docker-compose.yml exec backend python manage.py makemigrations
            sudo docker compose -f docker-compose.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.yml exec backend python manage.py collectstatic --no-input
            sudo docker compose -f docker-compose.yml exec backend cp -r /app/collected_static/. /backend_static/static/


#  send_message:
#    name: Send deploy status message
#    runs-on: ubuntu-latest
#    needs: deploy
#
#    steps:
#    - name: send_message
#      uses: appleboy/telegram-action@master
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: ${{ github.workflow }} успешно выполнен!